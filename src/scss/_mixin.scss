@use './colors' as colors;

@mixin containerPadding($paddingV: 0.8rem , $paddingH: 14%){
    width: 100%;
    padding: $paddingV $paddingH;
}

@mixin underlineAnimation(){
    position: relative;
    width: fit-content;

    &::before {
        content: "";
        position: absolute;
        display: block;
        width: 100%;
        height: 0.25rem;
        bottom: 0;
        left: 0;
        background-color: map-get($map: colors.$colors, $key: 'primary');
        transform: scaleX(0);
        transform-origin: top right;
        transition: transform 0.3s ease;
    }

    &:hover::before {
    transform: scaleX(1);
    }
}

//buttons
@mixin button($color: map-get($map: colors.$colors, $key: 'primary'), $type: 'primary') {
    display: flex;
    justify-content: center;
    position: relative;
    min-width: 8.75rem;
    padding: 0.3125rem 1.25rem;
    border-radius: 0.9rem;
    
    font-size: 1.125rem;
    font-weight: 500;
    letter-spacing: 0.05rem;
    
    cursor: pointer;
    transition: ease-out 0.3s;

    &:active {
        transform: scale(0.85);
    }
    
    @if $type == 'primary'{
        background: transparent;
        color: $color;
        border: 0.125rem solid $color;
        box-shadow: inset 0 0 0 0 $color;

        &:hover {
            color: white;
            box-shadow: inset 0 -6.25rem 0 0 $color;
            transition: 1s;
        }

        &:active{
            transition: 0.5s;
        }

    }@else if $type == 'secondary'{
        
        background: transparent;
        border: 0.125rem solid map-get($map: colors.$colors, $key: 'black');

        &:hover {
            color: $color;
            border-color: $color;
        }
        
    }@else if $type == 'code'{
        color: map-get($map: colors.$colors, $key: 'white');
        border: none;
        background: linear-gradient(to right, #8e2de2, #4a00e0);
        overflow: hidden;

        & span {
            position: relative;
            z-index: 10;
            display: flex;
            align-items: center;
            gap: 0.8rem;
            
            & > svg{
                width: 1em;
            }
        }

        &::after, &::before{
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }

        &::before{
            content: "";
            background: map-get($map: colors.$colors, $key: 'black');
            width: 120%;
            left: -10%;
            transform: skew(30deg);
            transition: transform 0.4s cubic-bezier(0.3, 1, 0.8, 1);
        } 

        &:hover::before{
            transform: translate3d(100%, 0, 0);
        } 
    }
}

// inputs

@mixin input($background: black, $lineColor: map-get($map: colors.$colors, $key: 'primary')  ,$type: 'normal'){
    
    position: relative;
    width: 100%;
    border-radius: 0.3125rem;
    overflow: hidden;
    display: flex;
    flex-direction: column;

    .label {
        position: absolute;
        top: 1.25rem;
        left: 0.75rem;
        font-size: 1.125rem;
        color: rgba($background, 0.5);
        font-weight: 500;
        transform-origin: 0 0;
        transform: translate3d(0, 0, 0);
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .icon{
        position: absolute;
        color: rgba($background, 0.6);
        background-color: transparent;
        top: 1rem;
        right: 0.75rem;
        font-size: 1.5rem;
        cursor: pointer;

        &--active{
            color: $lineColor;
        }
    }

    .error-msg{
        padding: 0.75rem;
        color: map-get($map: colors.$colors, $key: 'error');
    }

    .focus-bg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba($background, 0.05);
        z-index: -1;
        transform: scaleX(0);
        transform-origin: left;
    }

    .input {
        -webkit-appearance: none;
        appearance: none;
        width: 100%;
        border: 0;
        font-family: inherit;
        padding: 1rem 0.75rem 0 0.75rem;
        height: 3.5rem;
        font-size: 1rem;
        font-weight: 400;
        letter-spacing: 0.0938rem;
        background: rgba($background, 0.02);
        box-shadow: inset 0 -0.0625rem 0 rgba($background, 0.3);
        color: $background;
        transition: all 0.15s ease;

        &:hover {
            background: rgba($background, 0.04);
            box-shadow: inset 0 -0.0625rem 0 rgba($background, 0.5);
        }

        &:not(:placeholder-shown) {
            + .label {
                color: rgba($background, 0.5);
                transform: translate3d(0, -0.75rem, 0) scale(0.75);
            }
        }

        &:focus {
            background: rgba($background, 0.05);
            outline: none;
            box-shadow: inset 0 -0.125rem 0 $lineColor;

            + .label {
                color: $lineColor;
                transform: translate3d(0, -0.75rem, 0) scale(0.75);
            }
            /* + .focus-bg {
                transform: scaleX(1);
                transition: all 0.1s ease;
            } */
        }
    }
}

//difficulty
@mixin difficulty ($color: white){
    
    border: 0.0625rem solid $color;
    display: flex;
    align-items: center;
    width: fit-content;
    border-radius: 0.3125rem;
    overflow: hidden;
    font-weight: bold;
    

    .number {
        background-color: $color;
        color: white;
        padding: 0.2rem 0.5rem;
        font-size: 0.75rem;
    }

    .tag {
        padding: 0 0.5rem;
        color: $color;
        text-transform: uppercase;
        font-size: 0.75rem;
    }
}